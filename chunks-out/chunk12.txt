valid_ipv4emcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  class #3']
['    type', ' [i32, f64, i32, i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #4']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  total classes', ' 5']

upper_triangular_matrixemcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  class #3']
['    type', ' [i32, f64, i32, i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #4']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 6']
['  total classes', ' 5']

orphan_processemcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  class #3']
['    type', ' [i32, f64, i32, i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #4']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  total classes', ' 5']

forkemcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  class #3']
['    type', ' [i32, f64, i32, i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #4']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  total classes', ' 5']

floyd_triangleemcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  class #3']
['    type', ' [i32, f64, i32, i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #4']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 6']
['  total classes', ' 5']

stack_overflowemcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 4']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #3']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  class #4']
['    type', ' [i32, f64, i32, i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #5']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  total classes', ' 6']

2dmatrixemcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  class #3']
['    type', ' [i32, f64, i32, i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #4']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  total classes', ' 5']

euclidianemcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  class #3']
['    type', ' [i32, f64, i32, i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #4']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  total classes', ' 5']

sum_seriesemcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  class #3']
['    type', ' [i32, f64, i32, i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #4']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 6']
['  total classes', ' 5']

horner_methodemcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  class #3']
['    type', ' [i32, f64, i32, i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #4']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 6']
['  total classes', ' 5']

zombie_processemcc-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 1']
['  class #2']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 1']
['  total classes', ' 3']

sum_serieswasi-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 3']
['    count (how often class appears)', ' 11']
['  total classes', ' 2']

horner_methodwasi-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 3']
['    count (how often class appears)', ' 11']
['  total classes', ' 2']

euclidianwasi-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 9']
['  total classes', ' 2']

upper_triangular_matrixwasi-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 3']
['    count (how often class appears)', ' 11']
['  total classes', ' 2']

valid_ipv4wasi-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 9']
['  total classes', ' 2']

2dmatrixwasi-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 9']
['  total classes', ' 2']

floyd_trianglewasi-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 3']
['    count (how often class appears)', ' 11']
['  total classes', ' 2']

stack_overflowwasi-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 4']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 4']
['  class #2']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 9']
['  total classes', ' 3']

floyd_trianglellvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 3']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 3']
['    count (how often class appears)', ' 10']
['  total classes', ' 2']

horner_methodllvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 3']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 3']
['    count (how often class appears)', ' 10']
['  total classes', ' 2']

sum_seriesllvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 3']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 3']
['    count (how often class appears)', ' 10']
['  total classes', ' 2']

upper_triangular_matrixllvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 3']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 3']
['    count (how often class appears)', ' 10']
['  total classes', ' 2']

2dmatrixllvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 3']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 8']
['  total classes', ' 2']

tic_tac_toellvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 5']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 4']
['    count (how often class appears)', ' 13']
['  total classes', ' 2']

euclidianllvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 3']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 8']
['  total classes', ' 2']

orphan_processllvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 3']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 8']
['  total classes', ' 2']

valid_ipv4llvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 3']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 8']
['  total classes', ' 2']

forkllvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 3']
['  class #1']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 8']
['  total classes', ' 2']

stack_overflowllvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [i32] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 4']
['    count (how often class appears)', ' 1']
['  class #1']
['    type', ' [i32, i64, i32] -> [i64]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 1']
['    count (how often class appears)', ' 3']
['  class #2']
['    type', ' [i32, i32, i32] -> [i32]']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 2']
['    count (how often class appears)', ' 8']
['  total classes', ' 3']

zombie_processllvm-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  class #0']
['    type', ' [] -> []']
['    start idx', ' None, end idx', ' None']
['    size (of class)', ' 0']
['    count (how often class appears)', ' 1']
['  total classes', ' 1']

upper_triangular_matrixcheerp-analysis.txt
['function #0 is indirectly called with a fixed table index']
['  unreachable']
['  end']
['  ...']
['function #5 is indirectly called with a fixed table index']
['  global.get 13']
['  i32.load']
['  local.tee 2']
['  ...']
['function #12 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

valid_ipv4cheerp-analysis.txt
['function #0 is indirectly called with a fixed table index']
['  unreachable']
['  end']
['  ...']
['function #6 is indirectly called with a fixed table index']
['  global.get 9']
['  i32.load']
['  local.tee 2']
['  ...']
['function #8 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

tic_tac_toecheerp-analysis.txt
['function #0 is indirectly called with a fixed table index']
['  unreachable']
['  end']
['  ...']
['function #4 is indirectly called with a fixed table index']
['  global.get 16']
['  i32.load']
['  local.tee 2']
['  ...']
['function #12 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

forkcheerp-analysis.txt
['function #0 is indirectly called with a fixed table index']
['  unreachable']
['  end']
['  ...']
['function #7 is indirectly called with a fixed table index']
['  global.get 11']
['  i32.load']
['  local.tee 2']
['  ...']
['function #8 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

zombie_processcheerp-analysis.txt
['']
['call_indirect target equivalence classes (CFI equivalence classes)', '']
['  total classes', ' 0']

orphan_processcheerp-analysis.txt
['function #0 is indirectly called with a fixed table index']
['  unreachable']
['  end']
['  ...']
['function #7 is indirectly called with a fixed table index']
['  global.get 9']
['  i32.load']
['  local.tee 2']
['  ...']
['function #9 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

euclidiancheerp-analysis.txt
['function #0 is indirectly called with a fixed table index']
['  unreachable']
['  end']
['  ...']
['function #7 is indirectly called with a fixed table index']
['  global.get 12']
['  i32.load']
['  local.tee 2']
['  ...']
['function #10 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

sum_seriescheerp-analysis.txt
['function #5 is indirectly called with a fixed table index']
['  global.get 15']
['  i32.load']
['  local.tee 2']
['  ...']
['function #13 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

floyd_trianglecheerp-analysis.txt
['function #0 is indirectly called with a fixed table index']
['  unreachable']
['  end']
['  ...']
['function #5 is indirectly called with a fixed table index']
['  global.get 13']
['  i32.load']
['  local.tee 2']
['  ...']
['function #12 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

stack_overflowcheerp-analysis.txt
['function #0 is indirectly called with a fixed table index']
['  unreachable']
['  end']
['  ...']
['function #10 is indirectly called with a fixed table index']
['  global.get 10']
['  i32.load']
['  local.tee 2']
['  ...']
['function #11 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

2dmatrixcheerp-analysis.txt
['function #0 is indirectly called with a fixed table index']
['  unreachable']
['  end']
['  ...']
['function #7 is indirectly called with a fixed table index']
['  global.get 10']
['  i32.load']
['  local.tee 2']
['  ...']
['function #8 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

horner_methodcheerp-analysis.txt
['function #5 is indirectly called with a fixed table index']
['  global.get 14']
['  i32.load']
['  local.tee 2']
['  ...']
['function #12 is indirectly called with a fixed table index']
['  i32.const -1']
['  end']
['  ...']

