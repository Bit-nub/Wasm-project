Input file: tic_tac_toellvm.wasm
  binary:    tic_tac_toellvm.wasm

Functions:          151
  Imported:           8
  Non-imported:     143
  Exported:         134

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          9
  Of those, unique functions:     9 (i.e., at least 5.96% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     29220
  call:             707 (2.42% of all instructions)
  call_indirect:     18 (0.06% of all instructions, 2.48% of all calls)

Globals:
  #0 i32
     init: i32.const 73568
      43 × global.get   115 × global.set   158 total (27/73% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 73568
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 8032
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["stdin"]
     init: i32.const 4920
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["onlyOnce"]
     init: i32.const 1345
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["usertern"]
     init: i32.const 1344
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["mat"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__environ"]
     init: i32.const 1348
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["___environ"]
     init: i32.const 1348
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["_environ"]
     init: i32.const 1348
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["environ"]
     init: i32.const 1348
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__progname"]
     init: i32.const 1352
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__progname_full"]
     init: i32.const 1356
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__libc"]
     init: i32.const 1360
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__hwcap"]
     init: i32.const 1424
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__sysinfo"]
     init: i32.const 1428
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["program_invocation_short_name"]
     init: i32.const 1352
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["program_invocation_name"]
     init: i32.const 1356
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["__malloc_replaced"]
     init: i32.const 4584
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["__fsmu8"]
     init: i32.const 7712
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["__stdin_used"]
     init: i32.const 1184
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["__stdout_used"]
     init: i32.const 1336
       0 × global.get     0 × global.set     0 total
  #23 i32
     export: ["__stderr_used"]
     init: i32.const 1444
       0 × global.get     0 × global.set     0 total
  #24 i32
     export: ["stdout"]
     init: i32.const 4924
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     43 (30.07% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.70%) × [-9472]
    1  (0.70%) × [-8064]
    1  (0.70%) × [-5648]
    1  (0.70%) × [-1056]
    1  (0.70%) × [-336]
    1  (0.70%) × [-320]
    1  (0.70%) × [-288]
    1  (0.70%) × [-272]
    1  (0.70%) × [-192]
    1  (0.70%) × [-112]
    1  (0.70%) × [-96]
    1  (0.70%) × [-80]
    1  (0.70%) × [-64]
    2  (1.40%) × [-128]
    4  (2.80%) × [-32]
   19 (13.29%) × [-16]
  105 (73.43%) × []
  functions with stack allocation total: 38 (26.57%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-9472]",-9472,9472
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-8064]",-8064,8064
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-5648]",-5648,5648
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-1056]",-1056,1056
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-336]",-336,336
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-320]",-320,320
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-288]",-288,288
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-272]",-272,272
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-192]",-192,192
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-112]",-112,112
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-96]",-96,96
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-80]",-80,80
sp_csv_line:"tic_tac_toellvm.wasm",1,0.6993007,"[-64]",-64,64
sp_csv_line:"tic_tac_toellvm.wasm",2,1.3986014,"[-128]",-128,128
sp_csv_line:"tic_tac_toellvm.wasm",4,2.7972028,"[-32]",-32,32
sp_csv_line:"tic_tac_toellvm.wasm",19,13.286714,"[-16]",-16,16
sp_csv_line:"tic_tac_toellvm.wasm",105,73.426575,"[]",0,0

Counts of function types (28 unique types):
    1  (0.66%) × [i32, i32] -> [i64]
    1  (0.66%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.66%) × [i32, i32, i32, i64] -> [i64]
    1  (0.66%) × [i32, i64] -> []
    1  (0.66%) × [i32, i64, i32] -> [i64]
    1  (0.66%) × [i32, f32] -> []
    1  (0.66%) × [i32, f64] -> []
    1  (0.66%) × [i64, i64] -> [f32]
    1  (0.66%) × [i64, i64] -> [f64]
    1  (0.66%) × [f64] -> [f64]
    1  (0.66%) × [f64, i32] -> [f64]
    2  (1.32%) × [i32, i32, i32] -> []
    2  (1.32%) × [i32, i32, i32, i32] -> []
    2  (1.32%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    3  (1.99%) × [i32, i32, i32, i32] -> [i32]
    4  (2.65%) × [i32, i32] -> []
    4  (2.65%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (2.65%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    4  (2.65%) × [i32, i64, i64, i32] -> []
    4  (2.65%) × [i64, i64] -> [i32]
    5  (3.31%) × [] -> [i32]
    7  (4.64%) × [i32, i64, i64, i64, i64] -> []
    7  (4.64%) × [i64, i64, i64, i64] -> [i32]
   11  (7.28%) × [] -> []
   14  (9.27%) × [i32] -> []
   20 (13.25%) × [i32, i32] -> [i32]
   20 (13.25%) × [i32, i32, i32] -> [i32]
   27 (17.88%) × [i32] -> [i32]

Functions with at least one call_indirect: 8 (5.59% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [] -> []
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    13 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 13
  total classes: 2

CSV data for further analysis: tic_tac_toellvm.wasm,29220,707,18,2.4827585,151,9,5,2,5,13,9,13,265,57,21.509434,57,21.509434,57,21.509434

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"tic_tac_toellvm.wasm",0,1,5,"i32.load"
"tic_tac_toellvm.wasm",1,4,13,"i32.load"
